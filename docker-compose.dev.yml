version: '3.7'

services:
  # Nest.js Server container
  nestjs-app:
    container_name: nestjs-app
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    command: yarn start:dev
    environment:
      - SERVER_PORT=3000
      - NODE_ENV=development
    ports:
      - 3000:3000
      - 3001:3001
    expose:
      - 3000
      - 3001
    depends_on:
      - db-postgres
      - redis
    networks:
      - network-backend

  # Reverse Proxy Production version container
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    restart: "unless-stopped"
    depends_on:
      - nestjs-app
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - network-backend

  # Local PostgreSQL database container
  db-postgres:
    container_name: db-postgres
    image: postgres:12
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./postgres:/var/lib/postgresql/data
    networks:
      - network-backend

  redis:
    container_name: redis
    image: redis:latest
    hostname: redis-local
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server --requirepass "${REDIS_PASSWORD}"
    ports:
      - '6379:6379'
    restart: always
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis/acl/users.acl:/etc/redis/users.acl
    networks:
      - network-backend

# Docker Network
networks:
  network-backend:
    driver: bridge
    name: network-backend
